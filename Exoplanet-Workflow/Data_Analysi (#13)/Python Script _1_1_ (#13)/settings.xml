<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import astropy%%00010from astropy import units as u%%00010from astropy.coordinates import SkyCoord, EarthLocation%%00010%%00010from mpl_toolkits.mplot3d import Axes3D%%00010import matplotlib.pyplot as plt%%00010import numpy as np%%00010import pandas as pd%%00010%%00010import seaborn as sns%%00010%%00010import matplotlib.cm as cm%%00010%%00010def remove_outlier(df_in, col_name):%%00010    q1 = df_in[col_name].quantile(0.25)%%00010    q3 = df_in[col_name].quantile(0.75)%%00010    iqr = q3-q1 #Interquartile range%%00010    fence_low  = q1-1.5*iqr%%00010    fence_high = q3+1.5*iqr%%00010    df_out = df_in.loc[(df_in[col_name] &gt; fence_low) &amp; (df_in[col_name] &lt; fence_high)]%%00010    return df_out%%00010%%00010# Copy input to output%%00010output_table = input_table.copy()%%00010%%00010conf = output_table[output_table.state == 0]%%00010%%00010fp = output_table[output_table.state == 1]%%00010%%00010%%00010%%00010conf_points = list()%%00010fp_points = list()%%00010%%00010for _, planet in conf.iterrows():%%00010%%00009ra = planet.ra%%00010%%00009dec = planet.dec%%00010%%00009radius = planet.planet_radius%%00010%%00009temperature = planet.planet_temperature%%00010%%00009point = SkyCoord(ra=ra*u.degree, dec=dec*u.degree, frame='icrs')%%00010%%00009point = point.transform_to(&quot;galactic&quot;)%%00010%%00009conf_points.append([point.l.wrap_at('180d').radian, point.b.radian, radius, temperature])%%00010%%00009%%00010for _, planet in fp.iterrows():%%00010%%00009ra = planet.ra%%00010%%00009dec = planet.dec%%00010%%00009radius = planet.planet_radius%%00010%%00009temperature = planet.planet_temperature%%00010%%00009point = SkyCoord(ra=ra*u.degree, dec=dec*u.degree, frame='icrs')%%00010%%00009point = point.transform_to(&quot;galactic&quot;)%%00010%%00009fp_points.append([point.l.wrap_at('180d').radian, point.b.radian, radius, temperature])%%00010%%00010df_conf = pd.DataFrame(conf_points, columns = ['X', 'Y', 'Radius', 'Temperature'])%%00010df_fp = pd.DataFrame(fp_points, columns = ['X', 'Y', 'Radius', 'Temperature'])%%00010# df_conf.loc[-1] = [0, 0, 0, 10000, 0]%%00010df_conf = remove_outlier(df_conf, 'Temperature')%%00010%%00010# colors = cm.rainbow(np.linspace(0, 1, len(df_conf)))%%00010cmap = sns.cm.rocket%%00010%%00010%%00010fig = plt.figure()%%00010ax = fig.add_subplot(111, projection='aitoff')%%00010plt.grid(True)%%00010points = ax.scatter(df_conf.X, df_conf.Y, cmap = cmap, c = df_conf.Temperature, s = 100*df_conf.Radius / max(df_conf.Radius))%%00010# ax.scatter(df_fp.X, df_fp.Y, df_fp.Z, c='red', s=10)%%00010# ax.view_init(30, 185)%%00010fig.colorbar(points)%%00010# plt.colorbar()%%00010plt.show()"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="python3"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="sky plot 2"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="588"/>
<entry key="y-coordinate" type="xint" value="299"/>
<entry key="width" type="xint" value="104"/>
<entry key="height" type="xint" value="13"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="11"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="CONFIGURED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script.Python2ScriptNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="4.0.0.v201906190741"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="4.0.0.v201906241606"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
